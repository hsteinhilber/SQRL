<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDte" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>

/*------------------------------------------------------------------------------
  <auto-generated>
       This code was generated by a T4 template.

       Changes to this file may cause incorrect behavior and will be lost if
       the code is regenerated.
  </auto-generated>
------------------------------------------------------------------------------*/

using System;
using System.Reflection;
using System.Runtime.InteropServices;
using SQRL;

[assembly: AssemblyCompany(AssemblyInfo.Company)]
[assembly: AssemblyProduct(AssemblyInfo.Product)]
[assembly: AssemblyTitle(AssemblyInfo.Title)]
[assembly: AssemblyCopyright(AssemblyInfo.Copyright)]
[assembly: AssemblyConfiguration(AssemblyInfo.Configuration)]
[assembly: ComVisible(false)][assembly: CLSCompliant(false)]
[assembly: AssemblyVersion(AssemblyInfo.Version)]
[assembly: AssemblyFileVersion(AssemblyInfo.FileVersion)]
[assembly: AssemblyInformationalVersion(AssemblyInfo.InformationalVersion)]

<#
    var visualStudio = (this.Host as IServiceProvider).GetService(typeof(DTE)) as DTE;
	var project = visualStudio.Solution.FindProjectItem(this.Host.TemplateFile).ContainingProject as Project;
	
	var version = "0.0.0";
    var solutionPath = visualStudio.Solution.FullName;
    var solutionFolder = Path.GetDirectoryName(solutionPath);
    var versionFilePath = Path.Combine(solutionFolder, "VERSION");
	if (File.Exists(versionFilePath)) {
		version = File.ReadAllText(versionFilePath);
	}
	var commit = "0000000";
    using (var p = new System.Diagnostics.Process()) {
        p.StartInfo = new System.Diagnostics.ProcessStartInfo("git.exe", "log --oneline -1") {
            WorkingDirectory = solutionFolder, 
            RedirectStandardOutput = true,
            UseShellExecute = false,
            CreateNoWindow = true
        };
        p.Start();
        p.WaitForExit();

        if (p.ExitCode == 0) {
			commit = p.StandardOutput.ReadToEnd().Substring(0, 7);
		}		

        p.Close();
    }
	var infoVersion = string.Format("{0}-{1}", 
	                                version,
									commit); 
#>

namespace SQRL {
	internal sealed partial class AssemblyInfo {
		 internal const string Company = "Harry Steinhilber, Jr.";
		 internal const string Product = "SQRL for Windows";
		 internal const string Title = "<#= project.Name #>";
		 internal const string Copyright = "Copyright ©<#= DateTime.Now.Year #> Harry Steinhilber, Jr.";
		 internal const string Trademark = "All rights reserved";
		 internal const string Configuration = "<#= project.ConfigurationManager.ActiveConfiguration.ConfigurationName #>";
		 internal const string Version = "<#= version #>";
		 internal const string FileVersion = "<#= version #>";
		 internal const string InformationalVersion = "<#= infoVersion #>";
   
		 private AssemblyInfo() {
		 }
	}
}
